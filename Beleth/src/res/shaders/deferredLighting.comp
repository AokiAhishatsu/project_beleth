#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 1, binding = 0, rgba16f) uniform writeonly image2D defferedSceneImage;

layout (set = 1, binding = 1, rgba16f) uniform readonly image2DMS albedoSceneImage;

layout (set = 1, binding = 2, rgba32f) uniform readonly image2DMS worldPositionImage;

layout (set = 1, binding = 3, rgba16f) uniform readonly image2DMS normalImage;

layout (set = 1, binding = 4, rgba16f)   uniform readonly image2DMS specularEmissionImage;

layout (set = 1, binding = 5, r16f) uniform readonly image2D sampleCoverageMask;

layout (set = 0, binding = 0, std140, row_major) uniform Camera{
	vec3 eyePosition;
	mat4 m_View;
	mat4 m_ViewProjection;
	vec4 frustumPlanes[6];
};

// layout (std140) uniform DirectionalLight{
	// vec3 direction;
	// float intensity;
	// vec3 ambient;
	// vec3 color;
// } directional_light;

layout (push_constant, std430, row_major) uniform pushConstants{
	int numSamples;
	float sightRangeFactor;
} constants;

const float zfar = 10000;
const float znear = 0.1;
const vec3 fogColor = vec3(0.65,0.85,0.9);

float diffuse(vec3 direction, vec3 normal, float intensity)
{
	return max(0.0, dot(normal, -direction) * intensity);
}

float specular(vec3 direction, vec3 normal, vec3 eyePosition, vec3 vertexPosition, float specularFactor, float emissionFactor)
{
	vec3 reflectionVector = normalize(reflect(direction, normal));
	vec3 vertexToEye = normalize(eyePosition - vertexPosition);
	
	float specular = max(0.0, dot(vertexToEye, reflectionVector));
	
	return pow(specular, specularFactor) * emissionFactor;
}

float getFogFactor(float dist)
{
	return -0.0002/constants.sightRangeFactor*(dist-(zfar)/10.0*constants.sightRangeFactor) + 1;
}

void main(void){

	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	
	vec3 finalColor = vec3(0,0,0);
	vec3 albedo = vec3(0,0,0);
	vec3 position = vec3(0,0,0);
	vec3 normal = vec3(0,0,0);
	vec2 specular_emission = vec2(0,0);
	vec3 depth = vec3(0,0,0);
	
	vec3 sunLightDirection = normalize(vec3(-1,-1,-1));
	float diff = 0;
	float spec = 0;
	
	if(imageLoad(sampleCoverageMask, computeCoord).r == 1.0){
		
		for (int i=0; i<constants.numSamples; i++){
			
			albedo = imageLoad(albedoSceneImage, computeCoord,i).rgb; 
			normal = imageLoad(normalImage, computeCoord,i).rbg; 
			
			// prevent lighting atmosphere
			if (normal != vec3(0,0,0)){
				position = imageLoad(worldPositionImage, computeCoord,i).rgb; 
				specular_emission = imageLoad(specularEmissionImage, computeCoord,i).rg; 
				
				diff = diffuse(sunLightDirection, normal, 1);
				spec = specular(sunLightDirection, normal, eyePosition, position, specular_emission.r, specular_emission.g);
				
				vec3 diffuseLight = vec3(0.02,0.02,0.02) + vec3(1,1,1) * diff;
				vec3 specularLight = (vec3(1,1,1)) * spec;

				// diff = diffuse(directional_light.direction, normal, directional_light.intensity);
				// spec = specular(directional_light.direction, normal, eyePosition, position, specular_emission.r, specular_emission.g);
				
				// vec3 diffuseLight = directional_light.ambient + directional_light.color * diff;
				// vec3 specularLight = directional_light.color * spec;
				
				finalColor += albedo * diffuseLight + specularLight;
			}
			else{
				finalColor += albedo;
			}
		}
		
		finalColor /= constants.numSamples;
	}
	else {
		albedo = imageLoad(albedoSceneImage, computeCoord,0).rgb;
		normal = imageLoad(normalImage, computeCoord,0).rbg;
		
		if (normal != vec3(0,0,0)){
			position = imageLoad(worldPositionImage, computeCoord,0).rgb;
			specular_emission = imageLoad(specularEmissionImage, computeCoord,0).rg;
		
			diff = diffuse(sunLightDirection, normal, 1);
			spec = specular(sunLightDirection, normal, eyePosition, position, specular_emission.r, specular_emission.g);
				
			vec3 diffuseLight = vec3(0.02,0.02,0.02) + vec3(1,1,1) * diff;
			vec3 specularLight = (vec3(1,1,1)) * spec;
				
			// diff = diffuse(directional_light.direction, normal, directional_light.intensity);
			// spec = specular(directional_light.direction, normal, eyePosition, position, specular_emission.r, specular_emission.g);
			// vec3 ssao = imageLoad(ssaoBlurImage, computeCoord).rgb;
			
			// vec3 diffuseLight = directional_light.ambient + directional_light.color * diff;;
			// vec3 specularLight = directional_light.color * spec;
			
			finalColor += albedo * diffuseLight + specularLight;
		}
		else{
			finalColor = albedo;
		}
	}
	
	float dist = length(eyePosition - position);
	float fogFactor = getFogFactor(dist);
	finalColor = mix(fogColor, finalColor, clamp(fogFactor,0,1));
	
	imageStore(defferedSceneImage, computeCoord, vec4(finalColor,1.0));
}