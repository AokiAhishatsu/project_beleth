#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 1, binding = 0, rgba16f) uniform writeonly image2D ssao_out;

layout (set = 1, binding = 1, rgba32f) uniform readonly image2DMS worldPositionImage;

layout (set = 1, binding = 2, rgba16f) uniform readonly image2DMS normalImage;

layout (set = 1, binding = 3, rgba16f) uniform readonly image2D noiseImage;

layout (set = 1, binding = 4) uniform sampler2DMS depthImage;

layout (set = 1, binding = 5, std430) buffer Buffer {
	vec4 kernel[64];
};

layout(set = 0, binding = 0, std140, row_major) uniform Camera {
	vec3 eyePosition;
	mat4 m_View;
	mat4 m_ViewProjection;
	vec4 frustumPlanes[6];
};

layout (push_constant, std430, row_major) uniform pushConstants{
	mat4 m_Proj;
	float uRadius;
	float threshold;
	float kernelSize;
	float width;
	float height;
} constants;

const float zfar = 10000.0f;

void main(void){

	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.xy);
	
	vec3 worldPosition = imageLoad(worldPositionImage, computeCoord, 0).rgb;
	
	vec3 viewPosition = (m_View * vec4(worldPosition,1.0)).xyz;
	
	float actualDepth = viewPosition.z/zfar;
	
	vec3 normal = imageLoad(normalImage, computeCoord, 0).rgb;
	
	ivec2 noiseCoord = computeCoord - ivec2(floor(gl_GlobalInvocationID.x/4), floor(gl_GlobalInvocationID.y/4)) * 4; 
	
	vec3 rvec = imageLoad(noiseImage, noiseCoord).rgb;
	vec3 tangent = normalize(rvec - normal * dot(rvec, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 tbn = mat3(tangent, bitangent, normal);
	
	float occlusion = 0.0;
	float occlusionOffset = 0.0;
	for (int i = 0; i < constants.kernelSize; ++i) {
		// get sample position:
		vec3 smple = tbn * kernel[i].xyz;
		smple = smple * constants.uRadius + viewPosition;
	  
		// project sample position:
		vec4 offset = vec4(smple, 1.0);
		offset = constants.m_Proj * offset;
		offset.xy /= offset.w;
		offset.xy = offset.xy * 0.5 + 0.5;
		  
		if (offset.x < 1.0 && offset.y < 1.0 && offset.x >= 0.0 && offset.y >= 0.0){
			// get sample depth:
			float sampleDepth = (m_View * vec4(imageLoad(worldPositionImage,
				ivec2(offset.x * constants.width, offset.y * constants.height), 0).rgb,1.0)).z/zfar;
		  
			// range check & accumulate:
			float rangeCheck = abs(actualDepth - sampleDepth) < constants.threshold ? 1.0 : 0.0;
			
			occlusionOffset = (sampleDepth <= smple.z/zfar ? 1.0 : 0.0) * rangeCheck;
			occlusion += occlusionOffset;
		}
		else{
			occlusion += 0.4f;
		}
	}

	float depth = texelFetch(depthImage, computeCoord).r;
	
	occlusion = (1.0 - (occlusion / constants.kernelSize));
	
	imageStore(ssao_out, computeCoord, vec4(occlusion,occlusion,occlusion,1.0));
}